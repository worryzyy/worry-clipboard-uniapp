import ClipData from "android.content.ClipData";
import ClipboardManager from "android.content.ClipboardManager";
import Context from "android.content.Context";
import Bitmap from 'android.graphics.Bitmap';
import BitmapFactory from 'android.graphics.BitmapFactory';
import ImageDecoder from 'android.graphics.ImageDecoder';
import ByteArrayOutputStream from 'java.io.ByteArrayOutputStream';
import Base64 from 'android.util.Base64';
import File from 'java.io.File';
import FileProvider from 'androidx.core.content.FileProvider';
import FileOutputStream from 'java.io.FileOutputStream';

type ClipboardResult = {
	msg : string,
	data : string,
}


class MyClipboard {
	context : Context;
	myClipboardManager : ClipboardManager;
	constructor(context : Context) {
		this.context = context;
		this.myClipboardManager = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager;
	}

	/* 
	 *  复制文字
	 */
	copyClipboardData(data : string, callback : (result : ClipboardResult) => void) : void {
		const copyMyClipData = ClipData.newPlainText('label', data);
		this.myClipboardManager.setPrimaryClip(copyMyClipData);
		callback(funCallResult('复制成功', data));
	}

	/* 
	 *  粘贴文字
	 */
	pasteClipboardData(callback : (result : ClipboardResult) => void) : void {
		// if (this.myClipboardManager.hasText()) {  // 高版本已经弃用了  
		// 	const pasteText = this.myClipboardManager.getText() as string;
		// 	callback({ msg: '粘贴成功', data: pasteText } as ClipboardResult);
		// } else {
		// 	callback({ msg: '剪切板是空的', data: '' } as ClipboardResult);
		// }
		const pasteMyClipData = this.myClipboardManager.getPrimaryClip();
		if (pasteMyClipData != null && pasteMyClipData.getItemCount() > 0) {
			if (pasteMyClipData.getItemAt(0).getText() != null) {
				const pasteText = pasteMyClipData.getItemAt(0).getText() as string;
				callback(funCallResult('粘贴成功', pasteText));
			} else {
				callback(funCallResult('剪切板是空的', ''));
			}
		} else {
			callback(funCallResult('剪切板是空的', ''));
		}
	}

	/* 
	 * 清除
	 */
	clearClipboardData(callback : (result : ClipboardResult) => void) : void {
		const pasteMyClipData = this.myClipboardManager.getPrimaryClip();
		if (pasteMyClipData != null && pasteMyClipData.getItemCount() > 0) {
			this.myClipboardManager.clearPrimaryClip()
			callback(funCallResult('清除剪切板成功', ''));
		} else {
			callback(funCallResult('剪切板是空的', ''));
		}
	}

	/* 
	* 复制图片 
	 */
	copyImage(base64Data : string, callback : (result : ClipboardResult) => void) : void {
		try {
			const mBitmap = base64ToBitmap(base64Data);
			// 创建临时文件存储Bitmap
			const tempFile = new File(this.context.getCacheDir(), "copy_image.png");
			const fileOutputStream = new FileOutputStream(tempFile);
			mBitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);
			fileOutputStream.close();
			// 使用FileProvider获取Uri
			const mUri = FileProvider.getUriForFile(
				this.context,
				this.context.getApplicationContext().getPackageName() + ".provider",
				tempFile
			)
			const clipData = ClipData.newUri(this.context.getContentResolver(), "Image", mUri);
			this.myClipboardManager.setPrimaryClip(clipData);
			callback(funCallResult('复制图片成功', ''));
		} catch (e) {
			console.log(e)
			callback(funCallResult('复制图片失败', e.message!))
		}

	}
	/* 
	 * 粘贴图片
	 */
	pasteImage(callback : (result : ClipboardResult) => void) : void {
		try {
			const cr = this.context.getContentResolver();
			const pasteImageClipData = this.myClipboardManager.getPrimaryClip();
			if (pasteImageClipData != null && pasteImageClipData.getItemCount() > 0) {
				const item = pasteImageClipData.getItemAt(0);
				const pasteUri = item.getUri();
				if (pasteUri != null) {
					const uriMimeType = cr.getType(pasteUri)
					// console.log('uriMimeType', uriMimeType, pasteUri, item)
					if (uriMimeType != null) {
						const ImageSource = ImageDecoder.createSource(cr, pasteUri);
						const bitmap = ImageDecoder.decodeBitmap(ImageSource);
						callback(funCallResult('粘贴成功', bitmaptoByte(bitmap)));
					}
				} else {
					callback(funCallResult('剪切板是空的', ''));
				}
			} else {
				callback(funCallResult('剪切板是空的', ''));
			}
		} catch (e) {
			console.log(e)
			callback(funCallResult(e.message!, ''));
		}

	}
}


function bitmaptoByte(bitmapData : Bitmap) : string {
	const outputStream = new ByteArrayOutputStream();
	bitmapData.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
	const ImageData = outputStream.toByteArray();
	return Base64.encodeToString(ImageData, Base64.DEFAULT)
}

function base64ToBitmap(base64Data : string) : Bitmap {
	const mDecodeData = Base64.decode(base64Data, Base64.DEFAULT);
	const mBitmap = BitmapFactory.decodeByteArray(mDecodeData, 0, mDecodeData.size)
	return mBitmap
}

function funCallResult(msg : string, data : string) : ClipboardResult {
	return { msg, data } as ClipboardResult
}

const MyClipboardOb = new MyClipboard(UTSAndroid.getAppContext()!)

export function ctrlC(data : string, callback : (result : ClipboardResult) => void) : void {
	MyClipboardOb.copyClipboardData(data, callback)
}
export function ctrlV(callback : (result : ClipboardResult) => void) : void {
	MyClipboardOb.pasteClipboardData(callback)
}

export function ctrlCImg(base64 : string, callback : (result : ClipboardResult) => void) : void {
	MyClipboardOb.copyImage(base64, callback)
}
export function ctrlVImg(callback : (result : ClipboardResult) => void) : void {
	MyClipboardOb.pasteImage(callback)
}

export function clearCV(callback : (result : ClipboardResult) => void) : void {
	MyClipboardOb.clearClipboardData(callback)
}